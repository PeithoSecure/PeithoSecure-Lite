{
    "swagger": "2.0",
    "info": {
        "description": "Secure backend API built with Go, Keycloak, and SQLite.",
        "title": "PeithoSecure Lite API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/api/v1/admin-metrics": {
            "get": {
                "description": "Returns full Prometheus metrics (Basic Auth protected)",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Admin-only Prometheus metrics",
                "responses": {
                    "200": {
                        "description": "Prometheus-formatted metrics",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/check": {
            "get": {
                "description": "Determines if the email exists in the system and whether it has been verified",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Check if email exists and is verified",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email address to check",
                        "name": "email",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.CheckEmailResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid email",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/delete": {
            "delete": {
                "description": "Deletes the specified user from Keycloak and logs the action in the audit trail.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Delete a user account (admin only)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username to delete",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.DeleteResponse"
                        }
                    },
                    "400": {
                        "description": "Username missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    },
                    "500": {
                        "description": "Failed to delete from Keycloak or log audit",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/login": {
            "post": {
                "description": "Logs in the user and returns a Keycloak-issued JWT token pair along with email verification status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Authenticate user credentials",
                "parameters": [
                    {
                        "description": "Username and password payload",
                        "name": "loginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Authentication successful",
                        "schema": {
                            "$ref": "#/definitions/models.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Malformed request or JSON parsing failed",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    },
                    "429": {
                        "description": "Too many failed login attempts",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "description": "Invalidates the user's refresh token and clears session state",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout current user",
                "parameters": [
                    {
                        "description": "Refresh token payload",
                        "name": "logoutRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LogoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.LogoutResponse"
                        }
                    },
                    "400": {
                        "description": "Malformed request or missing token",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/refresh": {
            "post": {
                "description": "Uses a valid refresh token to issue a new access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Refresh token payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RefreshRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.RefreshResponse"
                        }
                    },
                    "400": {
                        "description": "Malformed request or missing refresh token",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired refresh token",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/register": {
            "post": {
                "description": "Creates a local user, sends verification email, and defers password/keycloak setup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user (deferred setup)",
                "parameters": [
                    {
                        "description": "Email and username payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Malformed request or missing fields",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    },
                    "409": {
                        "description": "Email already registered and verified",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    },
                    "500": {
                        "description": "Database or email error",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/request-password-reset": {
            "post": {
                "description": "Sends a password reset email to the user with a one-time token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Request password reset link",
                "parameters": [
                    {
                        "description": "Email to receive reset link",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PasswordResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GenericMessageResponse"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid email",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    },
                    "500": {
                        "description": "Internal error or email send failed",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/resend-token": {
            "get": {
                "description": "Sends a new verification email if the account exists and is not verified",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Resend email verification link",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User's registered email",
                        "name": "email",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Missing or already verified",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    },
                    "500": {
                        "description": "Email sending or DB error",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/reset-password": {
            "post": {
                "description": "Accepts a one-time token and new password, and resets the account password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Reset password using token",
                "parameters": [
                    {
                        "description": "Token and new password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PasswordResetConfirm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GenericMessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid or missing token/password",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    },
                    "500": {
                        "description": "Internal error or reset failure",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/secure-sample": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns a success message for authenticated users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Sample protected route",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/send-verification": {
            "post": {
                "description": "Sends a new verification email to the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Email"
                ],
                "summary": "Resend verification email",
                "parameters": [
                    {
                        "description": "Email payload",
                        "name": "emailRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Verification email sent",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/setup-password": {
            "post": {
                "description": "Sets initial password after email verification, creates Keycloak user, and writes PQC license",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Finalize user account setup",
                "parameters": [
                    {
                        "description": "Token and new password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SetupPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GenericMessageResponse"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid input",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    },
                    "409": {
                        "description": "Already verified or setup attempted twice",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    },
                    "500": {
                        "description": "Server, Keycloak, or license error",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/unlock-status": {
            "get": {
                "description": "Returns license unlock state, branding status, and server clock",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "License"
                ],
                "summary": "License Unlock Status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.UnlockStatusResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/unlock/validate": {
            "post": {
                "description": "Accepts a signed PQC license block, writes it to disk, and validates it",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "license"
                ],
                "summary": "Validate unlock license",
                "parameters": [
                    {
                        "description": "License block payload",
                        "name": "unlockRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Unlock succeeded",
                        "schema": {
                            "$ref": "#/definitions/handlers.UnlockSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    },
                    "403": {
                        "description": "Unlock validation failed",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    },
                    "500": {
                        "description": "Write failed",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/verify-email": {
            "get": {
                "description": "Verifies email via token, marks user as verified, registers in Keycloak, and issues PQC license",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Email"
                ],
                "summary": "Verify user email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Verification token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.EmailVerificationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    },
                    "409": {
                        "description": "Already verified",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    }
                }
            }
        },
        "/api/v1/deeplink": {
            "get": {
                "description": "Redirects users to the appropriate app or web route based on platform and deep link type (verify/reset).",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "DeepLink"
                ],
                "summary": "Universal deep link handler",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Link type (verify or reset)",
                        "name": "type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Verification or reset token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirect to app or browser path",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    }
                }
            }
        },
        "/api/v1/deeplink/legacy": {
            "get": {
                "description": "Redirects to PeithoSecure app using deep link for verify/reset tokens (legacy path)",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "DeepLink"
                ],
                "summary": "Legacy deep link redirect",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Link type (verify/reset)",
                        "name": "type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Verification or reset token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirect to app URI",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Missing or invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    }
                }
            }
        },
        "/api/v1/events/log": {
            "post": {
                "description": "Log a custom trace event (devtools, external agent, honeypot, etc.)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Submit system trace event",
                "parameters": [
                    {
                        "description": "Custom trace event to log",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.EngineEventPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event logged successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.GenericMessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    },
                    "422": {
                        "description": "Unknown actor type",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    }
                }
            }
        },
        "/api/v1/integrations": {
            "get": {
                "description": "Returns a list of enabled Keycloak clients integrated with the platform",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Integrations"
                ],
                "summary": "List active app integrations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handlers.IntegrationClient"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized or token expired",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    }
                }
            }
        },
        "/api/v1/log/trace": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns recent trace events stored in memory (for debugging, audits, or escalations)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logs"
                ],
                "summary": "View in-memory trace logs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handlers.TraceEventView"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/metrics": {
            "get": {
                "description": "Returns raw Prometheus metrics for external monitoring",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Prometheus metrics endpoint",
                "responses": {
                    "200": {
                        "description": "Prometheus-formatted metrics",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/metrics/tokens": {
            "get": {
                "description": "Returns current issued, refreshed, revoked, and active token counts",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Token metrics (usage stats)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.TokenMetricsResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/security-scan": {
            "get": {
                "description": "Runs a limited Peitho Prowler scan to check for signs of tampering, token leakage, or license gaps",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "security"
                ],
                "summary": "Trigger Prowler security audit",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ProwlerScanResponse"
                        }
                    },
                    "403": {
                        "description": "License lock or tamper guard triggered",
                        "schema": {
                            "$ref": "#/definitions/observer.TracePayload"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns the operational status of the PeithoSecure Lite backend",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Service health check",
                "responses": {
                    "200": {
                        "description": "Service is running",
                        "schema": {
                            "$ref": "#/definitions/handlers.HealthCheckResponse"
                        }
                    }
                }
            }
        },
        "/healthz": {
            "get": {
                "description": "Lightweight endpoint for readiness/liveness probes (Kubernetes, CI/CD, etc.)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Infra health probe",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.HealthzResponse"
                        }
                    }
                }
            }
        },
        "/status": {
            "get": {
                "description": "Returns branding, license status, copyright, and system mood",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Service status and branding info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.StatusResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.CheckEmailResponse": {
            "description": "Email presence and verification status",
            "type": "object",
            "properties": {
                "exists": {
                    "type": "boolean",
                    "example": true
                },
                "verified": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.DeleteResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User 'admin' deleted successfully"
                }
            }
        },
        "handlers.EmailVerificationResponse": {
            "description": "Returned when email is verified and account activated",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Email verified and Keycloak account created."
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                },
                "verified": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.EngineEventPayload": {
            "type": "object",
            "properties": {
                "actor": {
                    "description": "One of: DEV, USER, HACKER",
                    "type": "string",
                    "example": "USER"
                },
                "event": {
                    "description": "Custom event identifier",
                    "type": "string",
                    "example": "custom_event"
                },
                "lock": {
                    "description": "Whether to trigger lockdown",
                    "type": "boolean",
                    "example": false
                },
                "message": {
                    "description": "Human-readable description",
                    "type": "string",
                    "example": "Manual log injection"
                }
            }
        },
        "handlers.GenericMessageResponse": {
            "description": "Standard success message response",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Operation completed successfully"
                }
            }
        },
        "handlers.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "service": {
                    "type": "string",
                    "example": "PeithoSecure Lite"
                },
                "status": {
                    "type": "string",
                    "example": "ok"
                },
                "version": {
                    "type": "string",
                    "example": "1.0.0"
                }
            }
        },
        "handlers.HealthzResponse": {
            "type": "object",
            "properties": {
                "service": {
                    "type": "string",
                    "example": "PeithoSecure Lite"
                },
                "status": {
                    "type": "string",
                    "example": "ok"
                },
                "version": {
                    "type": "string",
                    "example": "1.0.0"
                }
            }
        },
        "handlers.IntegrationClient": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string",
                    "example": "peitho-dashboard"
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "Peitho Dashboard"
                },
                "protocol": {
                    "type": "string",
                    "example": "openid-connect"
                },
                "public_client": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "handlers.LogoutRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "example": "eyJhbGc..."
                }
            }
        },
        "handlers.LogoutResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User logged out successfully."
                }
            }
        },
        "handlers.PasswordResetConfirm": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "SuperSecurePassword123!"
                },
                "token": {
                    "type": "string",
                    "example": "abc123token"
                }
            }
        },
        "handlers.PasswordResetRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                }
            }
        },
        "handlers.ProwlerScanResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "completed"
                },
                "summary": {
                    "$ref": "#/definitions/prowler.ScanResult"
                }
            }
        },
        "handlers.RefreshRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "example": "eyJhbGc..."
                }
            }
        },
        "handlers.RefreshResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGc..."
                },
                "expires_in": {
                    "type": "integer",
                    "example": 300
                },
                "refresh_token": {
                    "type": "string",
                    "example": "eyJhbGc..."
                },
                "token_type": {
                    "type": "string",
                    "example": "Bearer"
                }
            }
        },
        "handlers.RegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "handlers.RegisterResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "user registered successfully, please verify email"
                }
            }
        },
        "handlers.SetupPasswordRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "StrongPassword123!"
                },
                "token": {
                    "type": "string",
                    "example": "verify-token-abc123"
                }
            }
        },
        "handlers.StatusResponse": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string",
                    "example": "PeithoSecure Lite"
                },
                "copyright": {
                    "type": "string",
                    "example": "© 2025 Peitho"
                },
                "license_status": {
                    "type": "string",
                    "example": "Valid"
                },
                "mood": {
                    "type": "string",
                    "example": "Stable"
                }
            }
        },
        "handlers.TokenMetricsResponse": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "integer",
                    "example": 103
                },
                "issued": {
                    "type": "integer",
                    "example": 142
                },
                "refreshed": {
                    "type": "integer",
                    "example": 87
                },
                "revoked": {
                    "type": "integer",
                    "example": 12
                }
            }
        },
        "handlers.TraceEventView": {
            "type": "object",
            "properties": {
                "actor": {
                    "type": "string",
                    "example": "USER"
                },
                "event": {
                    "type": "string",
                    "example": "auth_failed"
                },
                "id": {
                    "type": "string",
                    "example": "7c8bfc1d"
                },
                "lock": {
                    "type": "boolean",
                    "example": false
                },
                "message": {
                    "type": "string",
                    "example": "unauthorized access detected"
                },
                "severity": {
                    "type": "string",
                    "example": "low"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2025-05-16T09:12:00Z"
                }
            }
        },
        "handlers.UnlockStatusResponse": {
            "type": "object",
            "properties": {
                "branding_locked": {
                    "type": "boolean",
                    "example": true
                },
                "expires_at": {
                    "type": "string",
                    "example": "2025-08-14T02:50:19Z"
                },
                "secured_by": {
                    "type": "string",
                    "example": "Peitho 🔐"
                },
                "server_time": {
                    "type": "string",
                    "example": "2025-05-16T09:30:00Z"
                },
                "trace_engine_active": {
                    "type": "boolean",
                    "example": true
                },
                "unlocked": {
                    "type": "boolean",
                    "example": true
                },
                "unlocked_at": {
                    "type": "string",
                    "example": "2025-05-16T02:50:19Z"
                }
            }
        },
        "handlers.UnlockSuccessResponse": {
            "description": "Response for successful license unlock",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "unlocked"
                }
            }
        },
        "models.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "email_verified": {
                    "description": "\u003c-- Added email verification info",
                    "type": "boolean"
                },
                "expires_in": {
                    "type": "integer"
                },
                "refresh_token": {
                    "type": "string"
                },
                "token_type": {
                    "type": "string"
                }
            }
        },
        "observer.Actor": {
            "type": "string",
            "enum": [
                "DEV",
                "USER",
                "HACKER"
            ],
            "x-enum-varnames": [
                "DEV",
                "USER",
                "HACKER"
            ]
        },
        "observer.ThreatLevel": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3,
                4
            ],
            "x-enum-comments": {
                "LEVEL_LOCKDOWN": "4 - System-level tampering, triggers lockdown",
                "LEVEL_MEAN": "3 - Mid-tier severity, often for hacks",
                "LEVEL_MOCK": "2 - Snarky, non-critical",
                "LEVEL_NONE": "0",
                "LEVEL_SOFT": "1 - Minor mistake, gentle pushback"
            },
            "x-enum-varnames": [
                "LEVEL_NONE",
                "LEVEL_SOFT",
                "LEVEL_MOCK",
                "LEVEL_MEAN",
                "LEVEL_LOCKDOWN"
            ]
        },
        "observer.TracePayload": {
            "type": "object",
            "properties": {
                "actor": {
                    "description": "Who triggered it",
                    "allOf": [
                        {
                            "$ref": "#/definitions/observer.Actor"
                        }
                    ],
                    "example": "HACKER"
                },
                "event": {
                    "description": "Event type",
                    "type": "string",
                    "example": "tamper"
                },
                "id": {
                    "description": "Unique trace ID",
                    "type": "string",
                    "example": "abc123"
                },
                "lock": {
                    "description": "Lockdown trigger flag",
                    "type": "boolean",
                    "example": false
                },
                "message": {
                    "description": "Event message",
                    "type": "string",
                    "example": "unauthorized access detected"
                },
                "severity": {
                    "description": "ThreatLevel (as int for frontend)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/observer.ThreatLevel"
                        }
                    ],
                    "example": 3
                },
                "timestamp": {
                    "description": "UTC time",
                    "type": "string",
                    "example": "2025-05-16T12:30:00Z"
                }
            }
        },
        "prowler.ScanResult": {
            "type": "object",
            "properties": {
                "db_exists": {
                    "type": "boolean"
                },
                "docker_detected": {
                    "type": "boolean"
                },
                "license_token_present": {
                    "type": "boolean"
                },
                "smtp_configured": {
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}